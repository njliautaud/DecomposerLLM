/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "${rootProject.projectDir}/gradle/javaProject.gradle"
apply from: "${rootProject.projectDir}/gradle/helpProject.gradle"
apply from: "${rootProject.projectDir}/gradle/jacocoProject.gradle"
apply from: "${rootProject.projectDir}/gradle/javaTestProject.gradle"
apply from: "${rootProject.projectDir}/gradle/distributableGhidraModule.gradle"
apply from: "${rootProject.projectDir}/gradle/hasProtobuf.gradle"
apply from: "${rootProject.projectDir}/gradle/hasPythonPackage.gradle"

apply plugin: 'eclipse'
eclipse.project.name = 'GhidraLLM'

dependencies {
    api project(':Debugger')
    api project(':Debugger-api')
    api project(':Debugger-rmi-trace')
    
    // Add Langchain dependencies
    implementation 'com.google.api-client:google-api-client:2.2.0'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.19.0'
    
    testImplementation project(path: ':Generic', configuration: 'testArtifacts')
    testImplementation project(path: ':Debugger', configuration: 'testArtifacts')
    
    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'io.grpc:grpc-testing:1.53.0'
}

// Python package configuration
task configureGenerateProtoPy {
    dependsOn(configurations.protocArtifact)

    doLast {
        def exe = configurations.protocArtifact.first()
        if (!isCurrentWindows()) {
            exe.setExecutable(true)
        }
        generateProtoPy.commandLine exe
        generateProtoPy.args "--python_out=${generateProtoPy.outdir}"
        generateProtoPy.args "--pyi_out=${generateProtoPy.stubsOutdir}"
        generateProtoPy.args "-I${generateProtoPy.srcdir}"
        generateProtoPy.args generateProtoPy.src
    }
}

task generateProtoPy(type:Exec) {
    dependsOn(configureGenerateProtoPy)
    ext.srcdir = file("src/main/proto")
    ext.src = fileTree(srcdir) {
        include "**/*.proto"
    }
    ext.outdir = file("build/generated/source/proto/main/py")
    ext.stubsOutdir = file("build/generated/source/proto/main/pyi/ghidra_llm")
    outputs.dir(outdir)
    outputs.dir(stubsOutdir)
    inputs.files(src)
}

tasks.assemblePyPackage {
    from(generateProtoPy) {
        into "src/ghidra_llm"
    }
}

// Distribute Python dependencies
distributePyDep("langchain-0.1.0-py3-none-any.whl")
distributePyDep("google-generativeai-0.3.2-py3-none-any.whl")
distributePyDep("protobuf-6.31.0-py3-none-any.whl")

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
} 